import gmpy2
import binascii
import base64

def fermat_factor(n):
    a = gmpy2.isqrt(n)
    b2 = gmpy2.square(a) - n
    while not gmpy2.is_square(b2):
        a += 1
        b2 = gmpy2.square(a) - n
    p = a + gmpy2.isqrt(b2)
    q = a - gmpy2.isqrt(b2)
    return int(p), int(q)

def rsa_decrypt(p, q, e, cipher):
    n = p * q
    phi = (p - 1) * (q - 1)
    d = gmpy2.invert(e, phi)
    return pow(cipher, d, n)

def rsa_encrypt(p, q, e, plain):
    n = p * q
    return pow(plain, e, n)

def rsa_number_to_string(n):
    return binascii.unhexlify(hex(n)[2:]).decode('utf-8')
# implement rsa encryption of text from argument
n2 = 17264536219144915581138967799467314871733275018971001308727264813361577117933332026781133389712278162858372034127628115959377764209866518529212634850524406955285635277096432177602657649429405111696443254487298299169577988621600699876144943339687157191411991087349316426052746181437653979256372978925046798244083624662793814388177618016578313616665437630646680393917123604381610873755263615298346931036101867055505360275802395595123458623788396012194771759295901119189137417031422619882602330068836483546198284072147675699747342277322918465024743305675059311405147286593518492799574100534976620594152225661440683589017

n = 492175876627974117034932952031984653697540254216309557724905584041562322335996534275160637171604334836147008482147333007260156121465689437488676508229792067251130475040814539513751127111963393781269944539691087073594471286827093988717833827854189143561584916215313699456814621200536846134645191520938619647156362663516784267616456956150618361869917055001577537883682797890216391723771056754423933487334329404112700651586722275714376148336447670650222460228032427314770189692778655644155010472717836436340967444377807943668415464630561337038663854360922927891456842000158078873320638587195015189364864992147674074888081237195314454863218761819983241586503546856244440106129938503149907956446577411161287525832278069845447503535153044786046936464933913179828438082767989600641285751539743752490995750563484906593253617684607978615689078486971593888438339986547968325997222104870865296368815092682533887145371996632834948683051957686383255866720933961626362688785251883690801392006268881667728026586883500508126506029677288299120963966253767242852885322947335427791441873772974117857870347335656009709651540467244757508384262907968871636045110844575052627985808879379820232253223667976464464547769851254009920417283952527139008525477847
e = 65537
p = 22185037223948354624832661150445146499368289586907723121089858671438225099558000000838563837129594930325756941561042832784009974999416335133747677877801466236143003084485894772940891606408302694190881832130758817334060799309056181936059876319283218776920192265124946283482429332760359877836042182910415486518472207770792489709292174100696262096986219475261750600631262205955491723857389350025130689241019954039621054320842194744830937329673214245842313872025982123024581266368254438442829608949822297839594644110012866149374525267770241417108422415805810287700323995021111152732058614641511117931939735680930008436477
q = 22185037223948354624832661150445146499368289586907723121089858671438225099558000000838563837129594930325756941561042832784009974999416335133747677877801466236143003084485894772940891606408302694190881832130758817334060799309056181936059876319283218776920192265124946283482429332760359877836042182910415486518472207770792489709292174100696262096986219475261750600631262205955491723857389350025130689241019954039621054320842194744830937329673214245842313872025982123024581266368254438442829608949822297839594644110012866149374525267770241417108422415805810287700323995021111152732058614641511117931939735680930008435811
# read flag.txt into as plain text into plain
def rsa_n_to_base64_padded_key_string(n):
    txt = base64.b64encode(n.to_bytes((n.bit_length() + 7) // 8, 'big')).decode('utf-8')
    # pad wrap string to 64 character columns
    txt = '\n'.join([txt[i:i+64] for i in range(0, len(txt), 64)])
    txt = '-----BEGIN PUBLIC KEY-----\n'+txt + '\n-----END PUBLIC KEY-----'
    return txt

    

with open('flag.txt', 'r') as f:
    plain = f.read().strip()
    f.close()
# encrypt plain using rsa_encrypt and print the result
    cipher = rsa_encrypt(p, q, e, int(binascii.hexlify(plain.encode('utf-8')), 16))
    print(rsa_n_to_base64_padded_key_string(n))
    print(rsa_n_to_base64_padded_key_string(n2))
    print(rsa_n_to_base64_padded_key_string(cipher))
    # check decryption
    plain2 = rsa_decrypt(p, q, e, cipher)
    print(rsa_number_to_string(plain2))

# read output.txt as cipher text base64 decode 
    p2, q2 = fermat_factor(n2)
    plain2 = "${HQUNEHV8EwUEERsQHBAMFQ4aEwsDZBJ1} remember XOR, regards WCH"
    print(rsa_n_to_base64_padded_key_string(rsa_encrypt(p2, q2, e, int(binascii.hexlify(plain2.encode('utf-8')), 16))))